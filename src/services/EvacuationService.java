package services;

import entities.Alert;
import entities.Shelter;
import entities.User;
import entities.EmergencyTeam;

import java.util.List;

/**
 * Servi√ßo respons√°vel por coordenar todo o processo de evacua√ß√£o:
 * - Notificar usu√°rios
 * - Alocar usu√°rios em abrigos dispon√≠veis
 * - Despachar equipes de emerg√™ncia
 */
public class EvacuationService {

    private final UserService userService;
    private final ShelterService shelterService;
    private final EmergencyTeamService emergencyTeamService;
    private final AlertService alertService;

    /**
     * Constr√≥i o servi√ßo de evacua√ß√£o com todas as depend√™ncias necess√°rias.
     *
     * @param userService            servi√ßo de gerenciamento de usu√°rios
     * @param shelterService         servi√ßo de gerenciamento de abrigos
     * @param emergencyTeamService   servi√ßo de gerenciamento de equipes de emerg√™ncia
     * @param alertService           servi√ßo de gerenciamento de alertas
     */
    public EvacuationService(UserService userService,
                             ShelterService shelterService,
                             EmergencyTeamService emergencyTeamService,
                             AlertService alertService) {
        this.userService = userService;
        this.shelterService = shelterService;
        this.emergencyTeamService = emergencyTeamService;
        this.alertService = alertService;
    }

    /**
     * Executa o protocolo de evacua√ß√£o baseado em um alerta existente.
     * 1) Recupera o alerta pelo ID.
     * 2) Notifica TODOS os usu√°rios cadastrados sobre o alerta.
     * 3) Tenta alocar cada usu√°rio em um abrigo dispon√≠vel (ativo e com vaga).
     * 4) Despacha as primeiras equipes de emerg√™ncia dispon√≠veis para a √°rea.
     *
     * @param alertId ID do alerta que dispara a evacua√ß√£o.
     */
    public void evacuar(int alertId) {
        // 1) Buscar o alerta
        Alert alert = alertService.buscarPorId(alertId);
        if (alert == null) {
            System.out.println("‚ùå Alerta com ID " + alertId + " n√£o encontrado. Evacua√ß√£o abortada.");
            return;
        }

        String areaNome = alert.getArea().getNome();
        System.out.println("\nüèÉ Iniciando evacua√ß√£o para a √°rea: " + areaNome);

        // 2) Notificar todos os usu√°rios
        List<User> todosUsuarios = userService.listar();
        if (todosUsuarios.isEmpty()) {
            System.out.println("‚ö†Ô∏è N√£o h√° usu√°rios cadastrados para notificar.");
        } else {
            System.out.println("\nüì£ Notificando usu√°rios:");
            for (User u : todosUsuarios) {
                System.out.printf("   - Notificando %s (CPF: %s, Telefone: %s) sobre alerta em %s%n",
                        u.getNome(), u.getCpf(), u.getPhone(), areaNome);
            }
        }

        // 3) Alocar cada usu√°rio em um abrigo dispon√≠vel
        List<Shelter> todosAbrigos = shelterService.listar();
        if (todosAbrigos.isEmpty()) {
            System.out.println("\n‚ö†Ô∏è N√£o h√° abrigos cadastrados para aloca√ß√£o.");
        } else {
            System.out.println("\nüè† Alocando usu√°rios em abrigos dispon√≠veis:");
            for (User u : todosUsuarios) {
                boolean alocado = false;
                for (Shelter s : todosAbrigos) {
                    if (s.isActive() && s.getCapacityAtual() < s.getCapacityMax()) {
                        // tenta incluir usu√°rio
                        try {
                            s.entrarUsuario();
                            System.out.printf("   ‚úî %s alocado no abrigo %s (ocupa√ß√£o: %d/%d)%n",
                                    u.getNome(), s.getNome(), s.getCapacityAtual(), s.getCapacityMax());
                            alocado = true;
                            break;
                        } catch (IllegalStateException e) {
                            // abrigo cheio ou inativo: continuar procurando outro abrigo
                        }
                    }
                }
                if (!alocado) {
                    System.out.printf("   ‚ùå %s N√ÉO p√¥de ser alocado em nenhum abrigo.%n", u.getNome());
                }
            }
        }

        // 4) Despachar equipes de emerg√™ncia para a √°rea
        List<EmergencyTeam> todasEquipes = emergencyTeamService.listar();
        if (todasEquipes.isEmpty()) {
            System.out.println("\n‚ö†Ô∏è N√£o h√° equipes de emerg√™ncia cadastradas para despachar.");
        } else {
            System.out.println("\nüöë Despachando equipes de emerg√™ncia:");
            for (EmergencyTeam t : todasEquipes) {
                if (t.isAvailable()) {
                    boolean despachou = emergencyTeamService.dispatchTeam(t.getId());
                    if (despachou) {
                        System.out.printf("   ‚úî Equipe %s (ID %d) despachada para %s%n",
                                t.getNome(), t.getId(), areaNome);
                    }
                }
            }
        }

        System.out.println("\n‚úÖ Processo de evacua√ß√£o conclu√≠do para a √°rea " + areaNome + ".\n");
    }
}
